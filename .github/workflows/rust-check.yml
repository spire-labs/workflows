on:
  workflow_call:
    inputs:
      env-vars:
        description: 'Multiline list of KEY=VALUE pairs to set in the environment'
        required: false
        default: ''
        type: string
      test-exclude:
        description: "List of packages to exclude from cargo command test"
        required: false
        default: ""
        type: string


env:
  CARGO_TERM_COLOR: always

jobs:
  check:
    name: "Rust Check"
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: rust
          key: ${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cargo check tools
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-deny,cargo-udeps,cargo-audit,cargo-outdated,cargo-pants,osv-scanner,taplo

      - name: Set dynamic environment variables
        if: ${{ inputs['env-vars'] != '' }}
        shell: bash
        run: |
          echo "${{ inputs['env-vars'] }}" | sed '/^\s*$/d' >> $GITHUB_ENV

      - name: Lint
        run: |
          cargo fmt --all -- --check
          cargo clippy --workspace --all-targets --all-features -- -D warnings
          taplo lint
          taplo fmt --check
      

      - name: Dependency Check
        continue-on-error: true
        run: |
          cargo deny check
          cargo outdated --exit-code 1
          cargo udeps
          rm -rf ~/.cargo/advisory-db
          cargo audit
          cargo pants

      - name: Test
        shell: bash
        run: |
          if [ -n "${{ inputs.test-exclude }}" ]; then
            EXCLUDE_FLAGS=$(printf '%s' "${{ inputs.test-exclude }}" | xargs -n1 printf -- "--exclude %s ")
          else
            EXCLUDE_FLAGS=""
          fi
          cargo test --workspace --all-targets --all-features $EXCLUDE_FLAGS
